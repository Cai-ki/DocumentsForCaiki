模板
======

    .. code-block:: cpp

        #include "GLFW/glfw3.h"
        #include "imgui.h"
        #include "imgui_impl_glfw.h"
        #include "imgui_impl_opengl3.h"

        int main() {
        #pragma region Glfw init
            glfwInit();
            glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
            glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
            GLFWwindow* window =
                glfwCreateWindow(1920, 1200, "Imgui", nullptr, nullptr);
            glfwMakeContextCurrent(window);
            glfwSwapInterval(1);
        #pragma endregion

        #pragma region Imgui init
            IMGUI_CHECKVERSION();
            ImGui::CreateContext();
            ImGuiIO& io = ImGui::GetIO();
            (void)io;

            io.ConfigFlags |= ImGuiConfigFlags_NavEnableKeyboard;
            io.ConfigFlags |= ImGuiConfigFlags_NavEnableGamepad;

            io.ConfigFlags |= ImGuiConfigFlags_DockingEnable;
            io.ConfigFlags |= ImGuiConfigFlags_ViewportsEnable;

            io.ConfigFlags |= ImGuiViewportFlags_NoDecoration;

            io.Fonts->Clear();
            io.Fonts->AddFontFromFileTTF("c:/Windows/Fonts/msyh.ttc", 36.0f, NULL,
                                        io.Fonts->GetGlyphRangesChineseFull());


            ImGui::StyleColorsDark();
        #pragma endregion

        #pragma region Setup backends
            ImGui_ImplGlfw_InitForOpenGL(window, true);
            ImGui_ImplOpenGL3_Init("#version 330");
        #pragma endregion

        #pragma region Main loop
            while (!glfwWindowShouldClose(window)) {
                /*Start new frame*/
                ImGui_ImplOpenGL3_NewFrame();
                ImGui_ImplGlfw_NewFrame();
                ImGui::NewFrame();
                /*Start new frame*/

                /*Frame init*/
                glClear(GL_COLOR_BUFFER_BIT);
                ImGui::DockSpaceOverViewport();
                /*Frame init*/

                /*Draw GUI*/
                ImGui::ShowDemoWindow();
                ImGui::Begin("Demo");
                ImGui::Text("hello world!");
                ImGui::Text("你好世界！");
                ImGui::End();
                /*Draw GUI*/

                /*Draw*/
                ImGui::Render();
                ImGui_ImplOpenGL3_RenderDrawData(ImGui::GetDrawData());
                /*Draw*/

                /*Enable viewports*/
                if (io.ConfigFlags & ImGuiConfigFlags_ViewportsEnable) {
                    GLFWwindow* backup_current_context = glfwGetCurrentContext();
                    ImGui::UpdatePlatformWindows();
                    ImGui::RenderPlatformWindowsDefault();
                    glfwMakeContextCurrent(backup_current_context);
                }
                /*Enable viewports*/

                /*End of each round*/
                glfwPollEvents();
                glfwSwapBuffers(window);
                /*End of each round*/
            }
        #pragma endregion

        #pragma region Cleanup
            ImGui_ImplOpenGL3_Shutdown();
            ImGui_ImplGlfw_Shutdown();
            ImGui::DestroyContext();

            glfwDestroyWindow(window);
            glfwTerminate();
        #pragma endregion
            return 0;
        }